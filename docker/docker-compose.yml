# Define reusable environment configuration
x-shared-env: &shared-env
  env_file:
    - ../env/base.env
    - ../env/${ENVIRONMENT:-development}/shared.env

# Define common healthcheck settings
x-healthcheck-defaults: &healthcheck-defaults
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 30s

services:
  # RabbitMQ for Celery message broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    <<: *shared-env
    ports:
      - '${MQ_PORT:-5672}:5672' # AMQP port
      - '${MQ_MANAGEMENT_PORT:-15672}:15672' # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${MQ_USER}
      RABBITMQ_DEFAULT_PASS: ${MQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${MQ_VHOST}
      RABBITMQ_NODENAME: rabbit@rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      - bookmarkai-ml

  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    <<: *shared-env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '${DB_PORT:-5433}:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  seed:
    image: node:20
    <<: *shared-env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      CACHE_HOST: redis
      REDIS_HOST: redis
    command: >
      sh -c "npm install -g pnpm && 
           pnpm install && 
           pnpm run migrate && 
           pnpm run seed:all"
  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    ports:
      - '${CACHE_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Vault for secrets management
  vault:
    image: hashicorp/vault:latest
    cap_add:
      - IPC_LOCK
    ports:
      - '8200:8200'
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-token-bookmarkai
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - ./init-scripts/vault:/vault/init-scripts
    command: server -dev
    healthcheck:
      test: ['CMD', 'vault', 'status']
      interval: 10s
      timeout: 5s
      retries: 3

  # Vault initializer
  vault-init:
    image: hashicorp/vault:latest
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: dev-token-bookmarkai
    volumes:
      - ./init-scripts/vault:/scripts
    entrypoint: ['sh', '/scripts/init.sh']
    restart: on-failure

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki
      - tempo
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.4.0
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config.yaml:/etc/loki/local-config.yaml
      - loki-data:/var/lib/loki

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:latest
    command: -config.file=/etc/tempo/tempo-local.yaml
    ports:
      - '14268:14268' # jaeger ingest
      - '3200:3200' # tempo
      - '9411:9411' # zipkin
    volumes:
      - ./tempo/tempo-local.yaml:/etc/tempo/tempo-local.yaml
      - ./tempo/data:/etc/tempo/data

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../docs/prometheus-alerts-ml.yml:/etc/prometheus/alerts/ml-alerts.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - METRICS_STORAGE_TYPE=prometheus
    ports:
      - '16686:16686' # Jaeger UI
      - '4318:4318' # OTLP HTTP
      - '4317:4317' # OTLP gRPC
    networks:
      - bookmarkai-network

volumes:
  postgres-data:
  redis-data:
  minio-data:
  loki-data:
  tempo-data:
  grafana-data:
  prometheus-data:
  vault-data:
  rabbitmq-data:

networks:
  bookmarkai-network:
    driver: bridge
  bookmarkai-ml:
    driver: bridge
