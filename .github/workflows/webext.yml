name: WebExtension CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/extension/**'
      - '.github/workflows/webext.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/extension/**'
      - '.github/workflows/webext.yml'
  workflow_dispatch:

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run ESLint
      run: pnpm --filter @bookmarkai/extension lint
    
    - name: Run TypeScript type check
      run: pnpm --filter @bookmarkai/extension type-check
    
    - name: Run tests
      run: pnpm --filter @bookmarkai/extension test
    
    - name: Build extension
      run: pnpm --filter @bookmarkai/extension build
      env:
        NODE_ENV: production
        VITE_OAUTH_AUTH_URL: ${{ secrets.VITE_OAUTH_AUTH_URL }}
        VITE_OAUTH_TOKEN_URL: ${{ secrets.VITE_OAUTH_TOKEN_URL }}
        VITE_OAUTH_USERINFO_URL: ${{ secrets.VITE_OAUTH_USERINFO_URL }}
        VITE_OAUTH_CLIENT_ID: ${{ secrets.VITE_OAUTH_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        VITE_WEB_APP_URL: ${{ secrets.VITE_WEB_APP_URL }}
    
    - name: Run web-ext lint
      run: |
        cd packages/extension
        npx web-ext lint --source-dir=dist
    
    - name: Package extension
      if: matrix.node-version == '20.x'
      run: |
        cd packages/extension
        npx web-ext build --source-dir=dist --artifacts-dir=artifacts
    
    - name: Upload extension artifact
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: bookmarkai-webext-${{ github.sha }}
        path: packages/extension/artifacts/*.zip
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: webext-v${{ github.run_number }}
        release_name: WebExtension Build ${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ### Changes
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: true
    
    - name: Upload Release Asset
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: packages/extension/artifacts/bookmarkai_web_clip-1.0.0.zip
        asset_name: bookmarkai-webext-${{ github.sha }}.zip
        asset_content_type: application/zip

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-test-build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      with:
        args: --project-path=packages/extension
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}