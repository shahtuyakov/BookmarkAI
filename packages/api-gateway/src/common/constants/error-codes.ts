/**
 * Error code constants following ADR-012 taxonomy
 * Format: CATEGORY_SPECIFIC_ERROR
 */

// Validation Errors
export const VALIDATION_ERRORS = {
  INVALID_URL: 'INVALID_URL',
  INVALID_EMAIL_FORMAT: 'INVALID_EMAIL_FORMAT',
  INVALID_PASSWORD_FORMAT: 'INVALID_PASSWORD_FORMAT',
  INVALID_REQUEST_BODY: 'INVALID_REQUEST_BODY',
  INVALID_QUERY_PARAMS: 'INVALID_QUERY_PARAMS',
  INVALID_UUID: 'INVALID_UUID',
  INVALID_PAGINATION_CURSOR: 'INVALID_PAGINATION_CURSOR',
  INVALID_DATE_FORMAT: 'INVALID_DATE_FORMAT',
  INVALID_PLATFORM: 'INVALID_PLATFORM',
  INVALID_FIELD_VALUE: 'INVALID_FIELD_VALUE',
} as const;

// Authentication Errors
export const AUTH_ERRORS = {
  AUTH_TOKEN_EXPIRED: 'AUTH_TOKEN_EXPIRED',
  AUTH_TOKEN_INVALID: 'AUTH_TOKEN_INVALID',
  AUTH_TOKEN_MISSING: 'AUTH_TOKEN_MISSING',
  AUTH_INVALID_CREDENTIALS: 'AUTH_INVALID_CREDENTIALS',
  AUTH_REFRESH_TOKEN_EXPIRED: 'AUTH_REFRESH_TOKEN_EXPIRED',
  AUTH_REFRESH_TOKEN_INVALID: 'AUTH_REFRESH_TOKEN_INVALID',
  AUTH_EMAIL_NOT_VERIFIED: 'AUTH_EMAIL_NOT_VERIFIED',
  AUTH_ACCOUNT_LOCKED: 'AUTH_ACCOUNT_LOCKED',
  AUTH_SESSION_EXPIRED: 'AUTH_SESSION_EXPIRED',
} as const;

// Authorization Errors
export const FORBIDDEN_ERRORS = {
  FORBIDDEN_RESOURCE_ACCESS: 'FORBIDDEN_RESOURCE_ACCESS',
  FORBIDDEN_INSUFFICIENT_PERMISSIONS: 'FORBIDDEN_INSUFFICIENT_PERMISSIONS',
  FORBIDDEN_ROLE_REQUIRED: 'FORBIDDEN_ROLE_REQUIRED',
  FORBIDDEN_SUBSCRIPTION_REQUIRED: 'FORBIDDEN_SUBSCRIPTION_REQUIRED',
} as const;

// Not Found Errors
export const NOT_FOUND_ERRORS = {
  NOT_FOUND_SHARE: 'NOT_FOUND_SHARE',
  NOT_FOUND_USER: 'NOT_FOUND_USER',
  NOT_FOUND_RESOURCE: 'NOT_FOUND_RESOURCE',
  NOT_FOUND_ENDPOINT: 'NOT_FOUND_ENDPOINT',
  NOT_FOUND_OPERATION: 'NOT_FOUND_OPERATION',
} as const;

// Conflict Errors
export const CONFLICT_ERRORS = {
  CONFLICT_DUPLICATE_EMAIL: 'CONFLICT_DUPLICATE_EMAIL',
  CONFLICT_DUPLICATE_SHARE: 'CONFLICT_DUPLICATE_SHARE',
  CONFLICT_DUPLICATE_IDEMPOTENCY_KEY: 'CONFLICT_DUPLICATE_IDEMPOTENCY_KEY',
  CONFLICT_RESOURCE_STATE: 'CONFLICT_RESOURCE_STATE',
  CONFLICT_VERSION_MISMATCH: 'CONFLICT_VERSION_MISMATCH',
} as const;

// Rate Limiting Errors
export const RATE_LIMIT_ERRORS = {
  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
  RATE_LIMIT_DAILY_QUOTA: 'RATE_LIMIT_DAILY_QUOTA',
  RATE_LIMIT_BURST_EXCEEDED: 'RATE_LIMIT_BURST_EXCEEDED',
} as const;

// External Service Errors
export const EXTERNAL_ERRORS = {
  EXTERNAL_TIKTOK_UNAVAILABLE: 'EXTERNAL_TIKTOK_UNAVAILABLE',
  EXTERNAL_REDDIT_UNAVAILABLE: 'EXTERNAL_REDDIT_UNAVAILABLE',
  EXTERNAL_TWITTER_UNAVAILABLE: 'EXTERNAL_TWITTER_UNAVAILABLE',
  EXTERNAL_SERVICE_TIMEOUT: 'EXTERNAL_SERVICE_TIMEOUT',
  EXTERNAL_SERVICE_ERROR: 'EXTERNAL_SERVICE_ERROR',
  EXTERNAL_INVALID_RESPONSE: 'EXTERNAL_INVALID_RESPONSE',
} as const;

// Server Errors
export const SERVER_ERRORS = {
  SERVER_DATABASE_ERROR: 'SERVER_DATABASE_ERROR',
  SERVER_INTERNAL_ERROR: 'SERVER_INTERNAL_ERROR',
  SERVER_CONFIGURATION_ERROR: 'SERVER_CONFIGURATION_ERROR',
  SERVER_QUEUE_ERROR: 'SERVER_QUEUE_ERROR',
  SERVER_CACHE_ERROR: 'SERVER_CACHE_ERROR',
  SERVER_STORAGE_ERROR: 'SERVER_STORAGE_ERROR',
} as const;

// Combine all error codes
export const ERROR_CODES = {
  ...VALIDATION_ERRORS,
  ...AUTH_ERRORS,
  ...FORBIDDEN_ERRORS,
  ...NOT_FOUND_ERRORS,
  ...CONFLICT_ERRORS,
  ...RATE_LIMIT_ERRORS,
  ...EXTERNAL_ERRORS,
  ...SERVER_ERRORS,
} as const;

// Type for all error codes
export type ErrorCode = (typeof ERROR_CODES)[keyof typeof ERROR_CODES];

// Error messages mapping
export const ERROR_MESSAGES: Record<ErrorCode, string> = {
  // Validation
  [VALIDATION_ERRORS.INVALID_URL]: 'The provided URL is not valid',
  [VALIDATION_ERRORS.INVALID_EMAIL_FORMAT]: 'Invalid email format',
  [VALIDATION_ERRORS.INVALID_PASSWORD_FORMAT]: 'Password does not meet requirements',
  [VALIDATION_ERRORS.INVALID_REQUEST_BODY]: 'Invalid request body',
  [VALIDATION_ERRORS.INVALID_QUERY_PARAMS]: 'Invalid query parameters',
  [VALIDATION_ERRORS.INVALID_UUID]: 'Invalid UUID format',
  [VALIDATION_ERRORS.INVALID_PAGINATION_CURSOR]: 'Invalid pagination cursor',
  [VALIDATION_ERRORS.INVALID_DATE_FORMAT]: 'Invalid date format',
  [VALIDATION_ERRORS.INVALID_PLATFORM]: 'Unsupported platform',
  [VALIDATION_ERRORS.INVALID_FIELD_VALUE]: 'Invalid field value',

  // Authentication
  [AUTH_ERRORS.AUTH_TOKEN_EXPIRED]: 'Access token has expired',
  [AUTH_ERRORS.AUTH_TOKEN_INVALID]: 'Invalid access token',
  [AUTH_ERRORS.AUTH_TOKEN_MISSING]: 'Access token is required',
  [AUTH_ERRORS.AUTH_INVALID_CREDENTIALS]: 'Invalid email or password',
  [AUTH_ERRORS.AUTH_REFRESH_TOKEN_EXPIRED]: 'Refresh token has expired',
  [AUTH_ERRORS.AUTH_REFRESH_TOKEN_INVALID]: 'Invalid refresh token',
  [AUTH_ERRORS.AUTH_EMAIL_NOT_VERIFIED]: 'Email address not verified',
  [AUTH_ERRORS.AUTH_ACCOUNT_LOCKED]: 'Account has been locked',
  [AUTH_ERRORS.AUTH_SESSION_EXPIRED]: 'Session has expired',

  // Authorization
  [FORBIDDEN_ERRORS.FORBIDDEN_RESOURCE_ACCESS]: 'Access to this resource is forbidden',
  [FORBIDDEN_ERRORS.FORBIDDEN_INSUFFICIENT_PERMISSIONS]: 'Insufficient permissions',
  [FORBIDDEN_ERRORS.FORBIDDEN_ROLE_REQUIRED]: 'Required role not found',
  [FORBIDDEN_ERRORS.FORBIDDEN_SUBSCRIPTION_REQUIRED]: 'Active subscription required',

  // Not Found
  [NOT_FOUND_ERRORS.NOT_FOUND_SHARE]: 'Share not found',
  [NOT_FOUND_ERRORS.NOT_FOUND_USER]: 'User not found',
  [NOT_FOUND_ERRORS.NOT_FOUND_RESOURCE]: 'Resource not found',
  [NOT_FOUND_ERRORS.NOT_FOUND_ENDPOINT]: 'Endpoint not found',
  [NOT_FOUND_ERRORS.NOT_FOUND_OPERATION]: 'Operation not found',

  // Conflict
  [CONFLICT_ERRORS.CONFLICT_DUPLICATE_EMAIL]: 'Email already exists',
  [CONFLICT_ERRORS.CONFLICT_DUPLICATE_SHARE]: 'Share already exists',
  [CONFLICT_ERRORS.CONFLICT_DUPLICATE_IDEMPOTENCY_KEY]:
    'Request with this idempotency key already processed',
  [CONFLICT_ERRORS.CONFLICT_RESOURCE_STATE]: 'Resource state conflict',
  [CONFLICT_ERRORS.CONFLICT_VERSION_MISMATCH]: 'Version mismatch',

  // Rate Limiting
  [RATE_LIMIT_ERRORS.RATE_LIMIT_EXCEEDED]: 'Too many requests',
  [RATE_LIMIT_ERRORS.RATE_LIMIT_DAILY_QUOTA]: 'Daily quota exceeded',
  [RATE_LIMIT_ERRORS.RATE_LIMIT_BURST_EXCEEDED]: 'Burst rate limit exceeded',

  // External Service
  [EXTERNAL_ERRORS.EXTERNAL_TIKTOK_UNAVAILABLE]: 'TikTok service unavailable',
  [EXTERNAL_ERRORS.EXTERNAL_REDDIT_UNAVAILABLE]: 'Reddit service unavailable',
  [EXTERNAL_ERRORS.EXTERNAL_TWITTER_UNAVAILABLE]: 'Twitter service unavailable',
  [EXTERNAL_ERRORS.EXTERNAL_SERVICE_TIMEOUT]: 'External service timeout',
  [EXTERNAL_ERRORS.EXTERNAL_SERVICE_ERROR]: 'External service error',
  [EXTERNAL_ERRORS.EXTERNAL_INVALID_RESPONSE]: 'Invalid response from external service',

  // Server
  [SERVER_ERRORS.SERVER_DATABASE_ERROR]: 'Database error',
  [SERVER_ERRORS.SERVER_INTERNAL_ERROR]: 'Internal server error',
  [SERVER_ERRORS.SERVER_CONFIGURATION_ERROR]: 'Server configuration error',
  [SERVER_ERRORS.SERVER_QUEUE_ERROR]: 'Queue processing error',
  [SERVER_ERRORS.SERVER_CACHE_ERROR]: 'Cache error',
  [SERVER_ERRORS.SERVER_STORAGE_ERROR]: 'Storage error',
};

// Helper to check if error is retryable
export function isRetryableError(code: ErrorCode): boolean {
  const retryableCodes: ErrorCode[] = [
    ...Object.values(RATE_LIMIT_ERRORS),
    ...Object.values(EXTERNAL_ERRORS),
    SERVER_ERRORS.SERVER_DATABASE_ERROR,
    SERVER_ERRORS.SERVER_QUEUE_ERROR,
    SERVER_ERRORS.SERVER_CACHE_ERROR,
  ];
  return retryableCodes.includes(code);
}

// Helper to get retry after seconds
export function getRetryAfterSeconds(code: ErrorCode): number | undefined {
  if (code === RATE_LIMIT_ERRORS.RATE_LIMIT_EXCEEDED) {
    return 60; // 1 minute
  }
  if (code === RATE_LIMIT_ERRORS.RATE_LIMIT_BURST_EXCEEDED) {
    return 10; // 10 seconds
  }
  if (code === RATE_LIMIT_ERRORS.RATE_LIMIT_DAILY_QUOTA) {
    return 86400; // 24 hours
  }
  return undefined;
}
