/* tslint:disable */
/* eslint-disable */
/**
 * BookmarkAI API
 * API for managing bookmarks across multiple platforms.  ## ADR-012 Compliance  This API follows the BookmarkAI API Style Guide (ADR-012): - All responses wrapped in standard envelope format - Consistent error taxonomy with structured details - Request ID tracking via X-Request-ID header - Cursor-based pagination for feeds - Idempotency key support for mutations  **Status**: âœ… Fully implemented and tested (2025-06-09)  ## Response Format  All successful responses follow this structure: ```json {   \"success\": true,   \"data\": <response_data>,   \"meta\": {     \"requestId\": \"uuid\",     \"version\": \"1.0.0\",     \"deprecation\": \"optional\"   } } ```  All error responses follow this structure: ```json {   \"success\": false,   \"error\": {     \"code\": \"ERROR_CATEGORY_SPECIFIC\",     \"message\": \"Human readable message\",     \"details\": { \"optional\": \"context\" },     \"timestamp\": \"2025-06-09T14:30:00.000Z\",     \"traceId\": \"uuid\"   } } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@bookmarkai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "https://api.bookmarkai.com/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}
