# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

def use_modular_headers!(flags = {})
  use_frameworks!(flags.merge(:linkage => :static))
end

target 'BookmarkAI' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec', :modular_headers => true

  post_install do |installer|
    # Configure targets
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Add C++ standard changes
        if target.name == 'Yoga' || target.name.start_with?('React')
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
        end
        
        # Initialize header search paths
        config.build_settings["HEADER_SEARCH_PATHS"] ||= '$(inherited)'
        
        # Handle Yoga paths
        if target.name == 'Yoga'
          yoga_path = '../node_modules/react-native/ReactCommon/yoga'
          config.build_settings["HEADER_SEARCH_PATHS"] = [
            "$(inherited)",
            "#{yoga_path}",
            "#{yoga_path}/yoga"
          ]
        end
        
        # Add React paths
        if target.name.start_with?('React')
          react_path = '../node_modules/react-native'
          config.build_settings["HEADER_SEARCH_PATHS"] += " #{react_path}/ReactCommon #{react_path}/ReactCommon/yoga #{react_path}/ReactCommon/yoga/yoga"
        end
      end
    end
    
    # Enable modular headers project-wide
    installer.pods_project.build_configurations.each do |config|
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
    end
  end
  
end
