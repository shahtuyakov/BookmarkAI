{
  "project": {
    "name": "BookmarkAI",
    "description": "Social media content capture platform with ML-powered enrichment",
    "overview": "Monorepo with NestJS API, React Native mobile app, browser extension, and Python ML services",
    "primaryLanguages": ["typescript", "python"],
    "architecture": "Event-driven microservices with BullMQ, PostgreSQL + pgvector, Redis cache"
  },

  "quickStart": {
    "newDeveloper": [
      "pnpm install",
      "./scripts/docker-start.sh",
      "pnpm -w run db:migrate",
      "pnpm -w run dev:api"
    ],
    "dailyStartup": [
      "docker-compose -f docker/docker-compose.yml up -d",
      "pnpm -w run dev:api"
    ]
  },

  "codeStyle": {
    "typescript": {
      "indent": 2,
      "quotes": "single",
      "preferArrowFunctions": true,
      "useTypeScript": "strict"
    },
    "python": {
      "formatter": "black",
      "maxLineLength": 88
    }
  },

  "projectStructure": {
    "packages": {
      "api-gateway": {
        "path": "packages/api-gateway",
        "description": "Main API service (NestJS)",
        "key_files": ["src/app.module.ts", "src/drizzle/schema/"]
      },
      "mobile": {
        "path": "packages/mobile/bookmarkaimobile",
        "description": "React Native app with share extensions"
      },
      "extension": {
        "path": "packages/extension",
        "description": "Browser extension for content capture"
      },
      "sdk": {
        "path": "packages/sdk",
        "description": "TypeScript SDK for API communication"
      }
    },
    "mlServices": {
      "path": "python/",
      "services": ["llm-service", "whisper-service", "vector-service"],
      "description": "Celery workers for ML tasks via RabbitMQ"
    }
  },

  "developmentWorkflows": {
    "addFeature": {
      "api": [
        "1. Create controller/service in packages/api-gateway/src/modules/",
        "2. Add DTOs for validation",
        "3. Update OpenAPI spec: apps/api/openapi.yaml",
        "4. Generate SDK: pnpm -w run sdk:generate",
        "5. Add tests"
      ],
      "mobile": [
        "1. Update component in packages/mobile/bookmarkaimobile/src/",
        "2. Update SDK if needed",
        "3. Test on simulator",
        "4. Run contract tests: pnpm --filter @bookmarkai/mobile test:contracts"
      ]
    },
    "debugging": {
      "mlPipeline": [
        "docker logs -f bookmarkai-llm-worker",
        "docker exec ml-rabbitmq rabbitmqctl list_queues",
        "Check Celery Flower: http://localhost:5555"
      ],
      "api": [
        "docker logs -f bookmarkai-api-gateway",
        "Check metrics: http://localhost:3001/api/ml/metrics/prometheus"
      ]
    }
  },

  "commands": {
    "dev": {
      "api": "pnpm -w run dev:api",
      "mobile:ios": "pnpm -w run mobile:ios",
      "mobile:android": "pnpm -w run mobile:android",
      "extension": "pnpm -w run dev:extension"
    },
    "docker": {
      "start": "./scripts/docker-start.sh",
      "stop": "./scripts/docker-stop.sh",
      "logs": "docker-compose logs -f",
      "ps": "docker ps"
    },
    "database": {
      "migrate": "pnpm -w run db:migrate",
      "generate": "pnpm -w run db:generate",
      "connect": "docker exec -it docker-postgres-1 psql -U bookmarkai -d bookmarkai_dev"
    },
    "testing": {
      "all": "pnpm -w run test:all",
      "api": "pnpm --filter api-gateway test",
      "mobile": "pnpm --filter @bookmarkai/mobile test"
    },
    "ml": {
      "health": "docker exec bookmarkai-vector-worker python -c \"from vector_service.tasks import health_check; print(health_check())\"",
      "queues": "docker exec ml-rabbitmq rabbitmqctl list_queues"
    }
  },

  "environment": {
    "structure": "env/{environment}/{service}.env",
    "key_files": [
      "env/base.env - Shared variables",
      "env/development/api-gateway.env - API config",
      "env/development/python-services.env - ML services config"
    ],
    "critical_vars": [
      "JWT_SECRET - Must match across services",
      "DATABASE_URL - PostgreSQL connection",
      "RABBITMQ_URL - Message queue connection",
      "OPENAI_API_KEY - For embeddings"
    ]
  },

  "troubleshooting": {
    "commonIssues": {
      "portInUse": {
        "error": "EADDRINUSE :3001",
        "fix": "kill -9 $(lsof -t -i:3001)"
      },
      "mlTimeout": {
        "error": "ML task timeout",
        "fix": ["Check RabbitMQ queues", "Restart ML workers", "Check worker logs"]
      },
      "authFailed": {
        "error": "401 Unauthorized",
        "fix": ["Verify JWT_SECRET matches", "Check token expiration", "Verify Supabase connection"]
      }
    }
  },

  "search": {
    "priorityPaths": [
      "packages/api-gateway/src/**/*.ts",
      "packages/mobile/bookmarkaimobile/src/**/*.tsx",
      "python/*/src/**/*.py"
    ],
    "excludePatterns": [
      "**/node_modules/**",
      "**/dist/**",
      "**/.next/**",
      "**/venv/**"
    ]
  },

  "contextFiles": [
    "CLAUDE.md - Project overview and conventions",
    "docs/architecture/decisions/ADR-*.md - Architecture decisions",
    "apps/api/openapi.yaml - API specification"
  ],

  "monitoring": {
    "grafana": "http://localhost:3000 (admin/admin)",
    "prometheus": "http://localhost:9090",
    "celeryFlower": "http://localhost:5555"
  }
}